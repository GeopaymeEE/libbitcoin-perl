
EC.pm,565
package EC;EC9,117
sub import {import19,207
sub Delta { -16*(4*$a**3 + 27*$b**2) }Delta40,880
sub check {check41,919
sub double {double49,1252
sub add {add57,1511
sub mult {mult73,1976
package EC::Point;EC::Point106,3182
sub horizon { bless { x => 0, y => 0 }, shift }horizon107,3201
sub clone { my $_ = shift; bless { x => $_->x, y => $_->y, order => $_->order }, ref $_ }clone108,3249
sub x { shift->{'x'} }x109,3339
sub y { shift->{'y'} }y110,3362
sub order { shift->{'order'} }order111,3385
package Math::BigInt;Math::BigInt129,3800

Bitcoin.pm,576
package Bitcoin;Bitcoin10,150
sub import {import16,260
package Bitcoin::Key;Bitcoin::Key43,946
sub size() { 256 }size48,1036
sub version() { $ENV{BITCOIN_TEST} ~~ /yes|true/i ? 129 : 128 }version49,1055
sub value { bless shift->copy(), 'Math::BigInt'; }value50,1119
sub address { new Bitcoin::Address shift->public_key }address51,1170
sub new {new53,1226
package Bitcoin::Address;Bitcoin::Address70,1683
sub size() { 160 }size72,1747
sub version() { $ENV{BITCOIN_TEST} ~~ /yes|true/i ? 1 : 0 }version73,1766
sub data {data74,1826
sub new {new79,1918

Bitcoin/CNames.pm,1046
package Bitcoin::CNames;Bitcoin::CNames2,16
package CPrivKey;		our @ISA = qw(Bitcoin::Key::Private);CPrivKey5,113
package CSecret;		our @ISA = qw(Bitcoin::Key::Secret);CSecret6,170
package CMasterKey;		our @ISA = qw(Bitcoin::Key::MasterKey);CMasterKey7,225
package CBase58Data;		our @ISA = qw(Bitcoin::Base58::Data);CBase58Data10,312
package CBitcoinAddress;	our @ISA = qw(Bitcoin::Address);CBitcoinAddress13,399
package CWallet;		our @ISA = qw(Bitcoin::Wallet);CWallet16,483
package CKeyStore;		our @ISA = qw(Bitcoin::KeyStore);CKeyStore19,561
package CBasicKeyStore;		our @ISA = qw(Bitcoin::KeyStore::Basic);CBasicKeyStore20,615
package CCryptoKeyStore;	our @ISA = qw(Bitcoin::KeyStore::Encrypted);CCryptoKeyStore21,681
package CBlock;			our @ISA = qw(Bitcoin::Block);CBlock24,776
package CBlockIndex;		our @ISA = qw(Bitcoin::Block::Index);CBlockIndex25,825
package CBlockLocator;		our @ISA = qw(Bitcoin::Block::Locator);CBlockLocator26,885
package CAddress;		our @ISA = qw(Bitcoin::Network::Address);CAddress29,977

Bitcoin/DataStream.pm,993
package Bitcoin::DataStream;Bitcoin::DataStream2,16
sub new {new47,746
sub cursor { shift->_no_class->{cursor} }cursor57,934
sub input  { shift->_no_class->{input} }input58,976
sub clear { my $_ = shift->_no_class; @$_[0,1] = (0, '') }clear65,1101
sub depth { length shift->{input} }depth66,1160
sub map_file {map_file68,1197
sub seek_file  { my $_ = shift->_no_class; $_->{cursor} = shift }seek_file76,1378
sub close_file { undef shift->_no_class->{input} }close_file77,1444
sub Read {Read79,1496
sub Write {Write90,1875
sub write_string {write_string99,2178
sub read_bytes {read_bytes106,2326
sub read_compact_size {read_compact_size115,2584
sub write_compact_size {write_compact_size124,2879
sub calc_size {calc_size134,3320
sub _no_class    { my $_ = shift; die "class method not implemented"    unless ref; return $_ }_no_class147,3718
sub _no_instance { my $_ = shift; die "instance method not implemented" if ref;     return $_ }_no_instance148,3814

Bitcoin/Electrum.pm,149
package Bitcoin::Electrum;Bitcoin::Electrum2,19
use constant SERVERS => qw(SERVERS6,72
sub py2json {py2json32,762
sub json2py {json2py37,909

Bitcoin/Database/SQL.pm,183
package Bitcoin::Database::SQL;Bitcoin::Database::SQL1,0
package Bitcoin::Block;Bitcoin::Block9,155
sub load {load10,179
sub save {save39,1018
sub dbupdate {dbupdate60,1665

Bitcoin/Database/Berkeley.pm,860
package Bitcoin::Database::Berkeley; # aka CDBBitcoin::Database::Berkeley5,66
sub _no_class    { my $_ = shift; die "class method not implemented"    unless ref; return $_ }_no_class11,186
sub _no_instance { my $_ = shift; die "instance method not implemented" if ref;     return $_ }_no_instance12,282
sub new {new14,379
sub Read {Read28,726
package Bitcoin::Disk::Index;Bitcoin::Disk::Index37,980
sub new {new45,1189
	SEARCH: {SEARCH66,1983
package Bitcoin::Block::Index;Bitcoin::Block::Index89,2740
sub new {new90,2771
package Bitcoin::Disk::Block::Index;Bitcoin::Disk::Block::Index108,3282
sub prefix() { 'blockindex' }prefix111,3376
sub filename() { 'blkindex.dat' }filename112,3406
sub indexed_object() { 'Bitcoin::Block::Index' }indexed_object113,3440
package Bitcoin::Block;Bitcoin::Block115,3490
sub load {load116,3514

Bitcoin/Electrum/Client.pm,148
package Bitcoin::Electrum::Client;Bitcoin::Electrum::Client9,229
sub raw_tx {raw_tx28,525
sub mktx {mktx79,1859
sub request {request86,1955

Bitcoin/Electrum/Mnemonic.pm,124
package Bitcoin::Electrum::Mnemonic;Bitcoin::Electrum::Mnemonic2,16
sub encode {encode10,189
sub decode {decode22,451

Bitcoin/Electrum/Wallet.pm,480
package Bitcoin::Electrum::Wallet;Bitcoin::Electrum::Wallet2,19
use constant VERSION => 2;VERSION18,359
use constant TEMPLATE => {TEMPLATE19,386
sub passwdToCipher {passwdToCipher30,721
sub new_seed {new_seed35,835
sub wallet_dir {wallet_dir42,1014
sub create_new_address {create_new_address52,1370
sub recover {recover93,2671
sub save {save99,2766
sub is_mine {is_mine105,2912
sub is_change {is_change110,3047
sub get_new_address {get_new_address116,3200

Bitcoin/Electrum/Client/GUI/GTK.pm,86
package Bitcoin::Electrum::Client::GUI::GTK;Bitcoin::Electrum::Client::GUI::GTK2,19

Bitcoin/Electrum/Client/GUI.pm,76
package Bitcoin::Electrum::Client::GUI;Bitcoin::Electrum::Client::GUI2,19

Bitcoin/Block.pm,1768
package Bitcoin::Block;Bitcoin::Block5,69
sub depth { shift->{depth} }depth10,171
sub work { shift->{work} }work11,200
sub new {new12,227
sub header { shift->{header} }header36,1080
sub transactions { shift->{transactions} }transactions37,1111
sub serialize {serialize38,1154
sub get_hash { shift->header->get_hash }get_hash48,1489
sub Merkle_tree {Merkle_tree50,1531
sub update {update66,2057
package Bitcoin::Block::Header;Bitcoin::Block::Header87,2690
sub _no_instance { my $_ = shift; die "instance method call not implemented" if ref;  return $_ }_no_instance91,2785
sub _no_class    { my $_ = shift; die "class method call not implemented" unless ref; return $_ }_no_class92,2883
sub version		{ shift->_no_class->{version}        // die 'undefined version' }version94,2982
sub hashPrev		{ shift->_no_class->{hashPrev}       // die 'undefined hashPrev' }hashPrev95,3061
sub hashMerkleRoot	{ shift->_no_class->{hashMerkleRoot} // die 'undefined hashMerkleRoot' }hashMerkleRoot96,3142
sub nTime		{ shift->_no_class->{nTime}          // die 'undefined nTime' }nTime97,3234
sub nBits		{ shift->_no_class->{nBits}          // die 'undefined nBits' }nBits98,3309
sub nNonce		{ shift->_no_class->{nNonce}         // die 'undefined nNonce' }nNonce99,3384
sub new {new101,3462
sub copy {copy121,4108
sub previous {previous126,4194
sub serialize {serialize135,4397
sub get_hash { my $this = shift->_no_class; Bitcoin::Digest::hash256_bin $this->serialize }get_hash141,4586
sub get_hash_hex { my $this = shift->_no_class; unpack 'H*', reverse $this->get_hash }get_hash_hex142,4678
sub target {target144,4766
sub work { 256 - log(shift->target)/log(2) }work151,4965
sub check_proof_of_work {check_proof_of_work152,5010

Bitcoin/Digest.pm,482
package Bitcoin::Digest;Bitcoin::Digest5,43
sub hash256_bin { use Digest::SHA qw(sha256); sha256 sha256 shift }hash256_bin17,341
sub hash160_bin {hash160_bin18,409
sub hash160_hex { unpack 'H*', reverse hash160_bin shift }hash160_hex26,580
sub hash256_hex { unpack 'H*', reverse hash256_bin shift }hash256_hex27,639
    sub hash160_int { hex unpack 'H*', hash160_hex shift }hash160_int31,717
    sub hash256_int { hex unpack 'H*', hash256_hex shift }hash256_int32,776

Bitcoin/Constants.pm,219
package Bitcoin::Constants;Bitcoin::Constants1,0
use constant DATA_DIR => $ENV{BITCOIN_DATA_DIR};DATA_DIR3,29
use constant GENESIS => '000000000019d6689c085ae165831e934ff763ae46a2a6c172b3f1b60a8ce26f';GENESIS4,78

Bitcoin/Base58.pm,770
package Bitcoin::Base58;Bitcoin::Base587,106
    sub decode { shift =~ m/$b58\Z/p ? $b58{${^MATCH}} + 58*decode(${^PREMATCH}) : 0 }decode28,527
    sub encode { my $_ = shift; return $_ < 58 ? $b58[$_] : encode($_/58) . $b58[$_%58] } encode29,614
package Bitcoin::Base58::Data;Bitcoin::Base58::Data33,788
sub _no_class    { my $_ = shift; die "class method call not implemented" unless ref; return $_ }_no_class55,1366
sub _no_instance { my $_ = shift; die "instance method call not implemented" if ref;  return $_ }_no_instance56,1464
    sub value {value65,1666
    sub data  {data71,1805
    sub value_from_address {value_from_address78,2023
    sub checksum {checksum84,2180
    sub to_hex {to_hex93,2389
    sub to_base58 {to_base58101,2539

Bitcoin/Transaction.pm,577
package Bitcoin::Transaction;Bitcoin::Transaction2,16
sub new {new15,195
sub serialize {serialize45,1200
sub copy {copy65,2302
sub verify {verify71,2428
sub strip_sig {strip_sig87,2888
sub unbless {unbless98,3218
sub get_hash {get_hash116,3690
sub get_hash_hex { unpack 'H*', reverse shift->get_hash }get_hash_hex121,3823
sub _no_instance { my $_ = shift; die "instance method call not implemented" if ref;  return $_ }_no_instance123,3882
sub _no_class    { my $_ = shift; die "class method call not implemented" unless ref; return $_ }_no_class124,3980

Bitcoin/Util.pm,320
package Bitcoin::Utils;Bitcoin::Utils2,16
package Bitcoin::Util;Bitcoin::Util4,66
    sub randInt {randInt29,361
    sub atoi {atoi36,555
    sub itoa {itoa44,710
    sub itob {itob52,873
    sub btoi {btoi60,1036
    sub btoa { itoa btoi shift }btoa67,1142
    sub atob { itob atoi shift }atob68,1175

Bitcoin/Database.pm,49
package Bitcoin::Database;Bitcoin::Database1,0

Bitcoin/KeyStore.pm,536
package Bitcoin::KeyStore;  # aka CKeyStoreBitcoin::KeyStore2,19
sub _no_class    { my $_ = shift; die 'class method call not implemented'    if ref     }_no_class10,171
sub _no_instance { my $_ = shift; die 'instance method call not implemented' unless ref }_no_instance11,261
package Bitcoin::KeyStore::Basic;  # aka CBasicKeyStoreBitcoin::KeyStore::Basic20,501
sub add_key {add_key23,592
sub have_key {have_key29,794
sub get_key {get_key36,969
package Bitcoin::KeyStore::Encrypted;Bitcoin::KeyStore::Encrypted44,1143

Bitcoin/Script.pm,1014
package Bitcoin::Script;Bitcoin::Script2,16
sub new {new12,205
sub code {code28,766
sub unbless { [ map $_->unbless, @{shift()} ] }unbless33,896
package Bitcoin::Script::Atom;Bitcoin::Script::Atom35,945
sub new {new43,1176
sub code { my $_ = shift; $_->{code} // sprintf '%2x', ${'Bitcoin::Script::Codes::'.$_->{op_code}}->[0] }code51,1446
sub _length { my $_ = shift; length($_->code) / 2 }_length52,1552
sub unbless { +{ %{shift()} } }unbless53,1604
package Bitcoin::Script::OP;Bitcoin::Script::OP55,1637
sub new {new58,1746
package Bitcoin::Script::PushData;Bitcoin::Script::PushData66,1974
sub data { my $this = shift; substr pack('H*', $this->{code}), $this->{offset} }data72,2162
sub new {new73,2243
package Bitcoin::Script::PushData::ASCII;Bitcoin::Script::PushData::ASCII107,3282
sub data { shift->{text} }data109,3366
package Bitcoin::Script::PushData::PublicKey;Bitcoin::Script::PushData::PublicKey111,3394
sub data { substr pack('H*', shift->{code}), 1 }data113,3482

Bitcoin/Script/Codes.pm,60
package Bitcoin::Script::Codes;Bitcoin::Script::Codes2,16

Bitcoin/Script/Stack.pm,720
package Bitcoin::Script::Stack;Bitcoin::Script::Stack2,16
sub check_size($)	{ die "stack is too small" if @S < shift }check_size13,259
sub Pop			{ check_size 1; pop @S }Pop15,321
sub Push		{ push @S, @_ }Push16,356
sub toAlt               { push @alt_S, Pop }toAlt18,383
sub fromAlt             { Push pop @alt_S  }fromAlt19,428
sub Dup                 { check_size 1; push @S, $S[$#S] }Dup21,474
sub Nip                 { check_size 2; splice @S, -2, 1 }Nip22,533
sub Tuck                { check_size 2; splice @S, -2, 0, $S[$#S] }Tuck23,592
sub Rot                 { check_size 3; push @S, splice @S, -3, 1 }Rot24,660
sub Swap                { check_size 2; push @S, splice @S, -2, 1 }Swap25,728

EC/DSA.pm,640
package EC::DSA;EC::DSA6,55
sub import { EC::import(@_) }import10,127
package EC::DSA::PublicKey;EC::DSA::PublicKey12,158
sub verify {verify18,314
sub serialize { serialize29,706
package EC::DSA::PublicKey::UnCompressed;EC::DSA::PublicKey::UnCompressed34,808
sub serialize { serialize36,885
sub compress {compress41,1030
package EC::DSA::PublicKey::Compressed;EC::DSA::PublicKey::Compressed46,1142
sub serialize { serialize48,1217
package EC::DSA::PrivateKey;EC::DSA::PrivateKey54,1376
sub sign {sign61,1496
sub public_key {public_key75,1989
sub random {random80,2147
package EC::DSA::ASN;EC::DSA::ASN106,2873

EC/Curves.pm,78
package EC::Curves;EC::Curves1,0
use constant secp256k1 => {secp256k15,87
